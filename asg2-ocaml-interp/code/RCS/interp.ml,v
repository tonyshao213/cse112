head	1.19;
access;
symbols;
locks;
comment	@; @;


1.19
date	2021.04.21.03.19.30;	author -;	state -;
branches;
next	1.18;

1.18
date	2021.01.29.19.08.27;	author -;	state -;
branches;
next	1.17;

1.17
date	2020.10.29.17.22.11;	author -;	state -;
branches;
next	1.16;

1.16
date	2020.10.22.02.39.19;	author -;	state -;
branches;
next	1.15;

1.15
date	2020.10.22.02.39.02;	author -;	state -;
branches;
next	1.14;

1.14
date	2020.10.22.02.35.25;	author -;	state -;
branches;
next	1.13;

1.13
date	2020.10.22.02.34.33;	author -;	state -;
branches;
next	1.12;

1.12
date	2020.10.22.02.04.38;	author -;	state -;
branches;
next	1.11;

1.11
date	2020.08.30.21.48.52;	author -;	state -;
branches;
next	1.10;

1.10
date	2020.08.17.07.02.07;	author -;	state -;
branches;
next	1.9;

1.9
date	2020.01.28.21.33.00;	author -;	state -;
branches;
next	1.8;

1.8
date	2020.01.24.19.42.24;	author -;	state -;
branches;
next	1.7;

1.7
date	2019.01.30.01.26.15;	author -;	state -;
branches;
next	1.6;

1.6
date	2019.01.25.03.14.14;	author -;	state -;
branches;
next	1.5;

1.5
date	2019.01.25.01.51.18;	author -;	state -;
branches;
next	1.4;

1.4
date	2019.01.25.01.08.37;	author -;	state -;
branches;
next	1.3;

1.3
date	2019.01.25.00.25.00;	author -;	state -;
branches;
next	1.2;

1.2
date	2019.01.25.00.14.37;	author -;	state -;
branches;
next	1.1;

1.1
date	2019.01.24.23.47.38;	author -;	state -;
branches;
next	;


desc
@@


1.19
log
@-
@
text
@(* $Id: interp.ml,v 1.18 2021-01-29 11:08:27-08 - - $ *)

open Absyn

let want_dump = ref false

let source_filename = ref ""

let rec eval_expr (expr : Absyn.expr) : float = match expr with
    | Number number -> number
    | Memref memref -> eval_memref memref
    | Unary (oper, expr) -> eval_STUB "eval_expr Unary"
    | Binary (oper, expr1, expr2) -> eval_STUB "eval_expr Binary"

and eval_memref (memref : Absyn.memref) : float = match memref with
    | Arrayref (ident, expr) -> eval_STUB "eval_memref Arrayref"
    | Variable ident -> try Hashtbl.find Tables.variable_table ident
                        with Not_found -> 0.0

and eval_STUB reason = (
    print_string ("(" ^ reason ^ ")");
    nan)

let rec interpret (program : Absyn.program) = match program with
    | [] -> ()
    | firstline::continue -> match firstline with
       | _, _, None -> interpret continue
       | _, _, Some stmt -> (interp_stmt stmt continue)

and interp_stmt (stmt : Absyn.stmt) (continue : Absyn.program) =
    match stmt with
    | Dim (ident, expr) -> interp_STUB "Dim (ident, expr)" continue
    | Let (memref, expr) -> interp_STUB "Let (memref, expr)" continue
    | Goto label -> interp_STUB "Goto label" continue
    | If (expr, label) -> interp_STUB "If (expr, label)" continue
    | Print print_list -> interp_print print_list continue
    | Input memref_list -> interp_input memref_list continue

and interp_print (print_list : Absyn.printable list)
                 (continue : Absyn.program) =
    let print_item item = match item with
        | String string ->
          let regex = Str.regexp "\"\\(.*\\)\""
          in print_string (Str.replace_first regex "\\1" string)
        | Printexpr expr ->
          print_string " "; print_float (eval_expr expr)
    in (List.iter print_item print_list; print_newline ());
    interpret continue


and interp_input (memref_list : Absyn.memref list)
                 (continue : Absyn.program)  =
    let input_number memref =
        try  let number = Etc.read_number ()
             in (print_float number; print_newline ())
        with End_of_file -> 
             (print_string "End_of_file"; print_newline ())
    in List.iter input_number memref_list;
    interpret continue

and interp_STUB reason continue = (
    print_string "Unimplemented: ";
    print_string reason;
    print_newline();
    interpret continue)

let interpret_program program =
    (Tables.init_label_table program; 
     if !want_dump then Tables.dump_label_table ();
     if !want_dump then Dumper.dump_program program;
     interpret program;
     if !want_dump then Tables.dump_label_table ())

@


1.18
log
@-
@
text
@d1 1
a1 1
(* $Id: interp.ml,v 1.17 2020-10-29 10:22:11-07 - - $ *)
d41 1
a41 2
    let print_item item =
        match item with
d71 2
a72 1
     interpret program)
@


1.17
log
@-
@
text
@d1 1
a1 1
(* $Id: interp.ml,v 1.16 2020-10-21 19:39:19-07 - - $ *)
d27 2
a28 2
      | _, _, None -> interpret continue
      | _, _, Some stmt -> (interp_stmt stmt continue)
@


1.16
log
@-
@
text
@d1 1
a1 1
(* $Id: interp.ml,v 1.15 2020-10-21 19:39:02-07 - - $ *)
d6 2
@


1.15
log
@-
@
text
@d1 1
a1 1
(* $Id: interp.ml,v 1.14 2020-10-21 19:35:25-07 - - $ *)
d25 1
a25 1
      | _, _, STUB -> interpret continue
@


1.14
log
@-
@
text
@d1 1
a1 1
(* $Id: interp.ml,v 1.13 2020-10-21 19:34:33-07 - - $ *)
d10 2
a11 2
    | Unary (oper, expr) -> eval_none "eval_expr Unary"
    | Binary (oper, expr1, expr2) -> eval_none "eval_expr Binary"
d14 1
a14 1
    | Arrayref (ident, expr) -> eval_none "eval_memref Arrayref"
d18 1
a18 1
and eval_none reason = (
d25 1
a25 1
      | _, _, None -> interpret continue
d30 4
a33 4
    | Dim (ident, expr) -> interp_none "Dim (ident, expr)" continue
    | Let (memref, expr) -> interp_none "Let (memref, expr)" continue
    | Goto label -> interp_none "Goto label" continue
    | If (expr, label) -> interp_none "If (expr, label)" continue
d60 1
a60 1
and interp_none reason continue = (
@


1.13
log
@-
@
text
@d1 1
a1 1
(* $Id: interp.ml,v 1.12 2020-10-21 19:04:38-07 - - $ *)
d19 1
a19 1
    print_string ("[" ^ reason ^ "]");
@


1.12
log
@-
@
text
@d1 1
a1 1
(* $Id: interp.ml,v 1.11 2020-08-30 14:48:52-07 - - $ *)
a4 13
(****
exception Unimplemented of string
let no_expr reason = raise (Unimplemented reason)
let no_stmt reason continuation = raise (Unimplemented reason)
****)

let no_expr reason = (print_string reason; 0.0 /. 0.0)
let no_stmt reason contin = (
    print_string reason;
    print_newline();
    interpret continuation;
)

d10 2
a11 2
    | Unary (oper, expr) -> no_expr "eval_expr Unary"
    | Binary (oper, expr1, expr2) -> no_expr "eval_expr Binary"
d14 1
a14 1
    | Arrayref (ident, expr) -> no_expr "eval_memref Arrayref"
d18 4
d24 3
a26 3
    | firstline::continuation -> match firstline with
      | _, _, None -> interpret continuation
      | _, _, Some stmt -> (interp_stmt stmt continuation)
d28 1
a28 1
and interp_stmt (stmt : Absyn.stmt) (continuation : Absyn.program) =
d30 6
a35 6
    | Dim (ident, expr) -> no_stmt "Dim (ident, expr)" continuation
    | Let (memref, expr) -> no_stmt "Let (memref, expr)" continuation
    | Goto label -> no_stmt "Goto label" continuation
    | If (expr, label) -> no_stmt "If (expr, label)" continuation
    | Print print_list -> interp_print print_list continuation
    | Input memref_list -> interp_input memref_list continuation
d38 1
a38 1
                 (continuation : Absyn.program) =
d45 1
a45 1
          (print_string " "; print_float (eval_expr expr))
d47 1
a47 1
    interpret continuation
d51 1
a51 1
                 (continuation : Absyn.program)  =
d58 7
a64 1
    interpret continuation
@


1.11
log
@-
@
text
@d1 1
a1 1
(* $Id: interp.ml,v 1.10 2020-08-17 00:02:07-07 - - $ *)
d5 1
d9 8
@


1.10
log
@-
@
text
@d1 1
a1 1
(* $Id: interp.ml,v 1.10 2020-02-03 14:04:35-08 - - $ *)
d13 1
a13 1
    | Memref memref -> no_expr "eval_expr Memref"
d16 5
@


1.9
log
@-
@
text
@d1 1
a1 1
(* $Id: interp.ml,v 1.8 2020-01-24 11:42:24-08 - - $ *)
d35 6
a40 7
        (print_string " ";
         match item with
         | String string ->
           let regex = Str.regexp "\"\\(.*\\)\""
           in print_string (Str.replace_first regex "\\1" string)
         | Printexpr expr ->
           print_float (eval_expr expr))
@


1.8
log
@-
@
text
@d1 1
a1 1
(* $Id: interp.ml,v 1.7 2019-01-29 17:26:15-08 - - $ *)
d45 1
@


1.7
log
@-
@
text
@d1 1
a1 1
(* $Id: interp.ml,v 1.6 2019-01-24 19:14:14-08 - - $ *)
d6 2
a7 1
let unimpl reason = raise (Unimplemented reason)
d13 3
a15 3
    | Memref memref -> unimpl "eval_expr Memref"
    | Unary (oper, expr) -> unimpl "eval_expr Unary"
    | Binary (oper, expr1, expr2) -> unimpl "eval_expr Binary"
d17 17
a33 1
let interp_print (print_list : Absyn.printable list) =
d42 2
a43 1
    in (List.iter print_item print_list; print_newline ())
d45 2
a46 1
let interp_input (memref_list : Absyn.memref list) =
d52 2
a53 15
    in List.iter input_number memref_list

let interp_stmt (stmt : Absyn.stmt) = match stmt with
    | Dim (ident, expr) -> unimpl "Dim (ident, expr)"
    | Let (memref, expr) -> unimpl "Let (memref, expr)"
    | Goto label -> unimpl "Goto label"
    | If (expr, label) -> unimpl "If (expr, label)"
    | Print print_list -> interp_print print_list
    | Input memref_list -> interp_input memref_list

let rec interpret (program : Absyn.program) = match program with
    | [] -> ()
    | firstline::otherlines -> match firstline with
      | _, _, None -> interpret otherlines
      | _, _, Some stmt -> (interp_stmt stmt; interpret otherlines)
@


1.6
log
@-
@
text
@d1 1
a1 1
(* $Id: interp.ml,v 1.5 2019-01-24 17:51:18-08 - - $ *)
d38 1
a38 1
    | Goto labsl -> unimpl "Goto labsl"
@


1.5
log
@-
@
text
@d1 1
a1 1
(* $Id: interp.ml,v 1.4 2019-01-24 17:08:37-08 - - $ *)
d18 1
a18 1
        (print_char ' ';
@


1.4
log
@-
@
text
@d1 3
a3 1
(* $Id: interp.ml,v 1.3 2019-01-24 16:25:00-08 - - $ *)
d11 4
a14 4
    | Absyn.Number number -> number
    | Absyn.Memref memref -> unimpl "eval_expr Memref"
    | Absyn.Unary (oper, expr) -> unimpl "eval_expr Unary"
    | Absyn.Binary (oper, expr1, expr2) -> unimpl "eval_expr Binary"
d20 1
a20 1
         | Absyn.String string ->
d23 1
a23 1
         | Absyn.Printexpr expr ->
d28 1
a28 1
    let input_number (memref : Absyn.memref) =
d36 6
a41 6
    | Absyn.Dim (ident, expr) -> unimpl "Dim (ident, expr)"
    | Absyn.Let (memref, expr) -> unimpl "Let (memref, expr)"
    | Absyn.Goto labsl -> unimpl "Goto labsl"
    | Absyn.If (expr, label) -> unimpl "If (expr, label)"
    | Absyn.Print print_list -> interp_print print_list
    | Absyn.Input memref_list -> interp_input memref_list
@


1.3
log
@-
@
text
@d1 1
a1 1
(* $Id: interp.ml,v 1.6 2019-01-24 13:15:38-08 - - $ *)
d6 2
d49 2
@


1.2
log
@-
@
text
@a5 2
let want_dump = ref false

a46 2
     if !want_dump then Tables.dump_label_table ();
     if !want_dump then Dumper.dump_program program;
@


1.1
log
@-
@
text
@d49 2
a50 2
     if !want_dump then (Tables.dump_label_table ();
                         Dumper.dump_program program);
@
