head	1.4;
access;
symbols;
locks;
comment	@# @;


1.4
date	2021.01.26.05.49.40;	author -;	state -;
branches;
next	1.3;

1.3
date	2020.10.20.19.44.08;	author -;	state -;
branches;
next	1.2;

1.2
date	2020.10.20.18.03.28;	author -;	state -;
branches;
next	1.1;

1.1
date	2020.10.20.18.02.41;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@
Objective Caml links:

The Objective Caml home page
https://ocaml.org/

Learn about OCaml
https://ocaml.org/learn/

OCaml Documentation
https://ocaml.org/docs/

Install OCaml
https://ocaml.org/docs/install.html

An Introduction to Objective Caml
/afs/cats.ucsc.edu/courses/cse112-wm/Languages/ocaml/intro-ocaml-columbia/
https://www2.ucsc.edu/courses/cse112-wm/:/Languages/ocaml/intro-ocaml-columbia/

Think OCaml: How to Think Like a (Functional) Computer Scientist
/afs/cats.ucsc.edu/courses/cse112-wm/Languages/ocaml/think-ocaml/
https://www2.ucsc.edu/courses/cse112-wm/:/Languages/ocaml/think-ocaml/
http://greenteapress.com/thinkocaml/

Unix Systems Programming in Objective Caml
https://www2.ucsc.edu/courses/cse112-wm/:/Languages/ocaml/unix-systems-programming/
https://www2.ucsc.edu/courses/cse112-wm/:/Languages/ocaml/unix-systems-programming/ocamlunix.pdf

Strict Typed Functional Programming in OCaml
https://www2.ucsc.edu/courses/cse112-wm/:/Languages/ocaml/strict-typed-fnprog-ocaml/
http://www.bromans.com/david/publ/ocaml-tutorial.pdf

Why do you like functional programming so much?
https://imgs.xkcd.com/comics/functional_2x.png

What is a Makefile and how does it work?
https://opensource.com/article/18/8/what-how-makefile

$Id: README.text,v 1.3 2020-10-20 12:44:08-07 - - $
@


1.3
log
@-
@
text
@d25 4
d39 1
a39 1
$Id: README.text,v 1.2 2020-10-20 11:03:28-07 - - $
@


1.2
log
@-
@
text
@d29 1
a29 1
Functional Programming
d32 4
a35 1
$Id: README.text,v 1.1 2020-10-20 11:02:41-07 - - $
@


1.1
log
@-
@
text
@d29 1
d32 1
a32 1
$Id: README.text,v 1.10 2020-01-22 16:19:04-08 - - $
@
