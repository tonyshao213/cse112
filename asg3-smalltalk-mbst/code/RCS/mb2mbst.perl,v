head	1.5;
access;
symbols;
locks;
comment	@# @;


1.5
date	2021.04.28.20.45.40;	author -;	state -;
branches;
next	1.4;

1.4
date	2020.11.10.01.56.54;	author -;	state -;
branches;
next	1.3;

1.3
date	2020.10.16.17.54.26;	author -;	state -;
branches;
next	1.2;

1.2
date	2020.09.07.04.02.55;	author -;	state -;
branches;
next	1.1;

1.1
date	2020.09.07.04.01.58;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@#!/usr/bin/perl
# $Id: mb2mbst.perl,v 1.4 2020-11-09 17:56:54-08 - - $

BEGIN {push @@INC, "/afs/cats.ucsc.edu/courses/cse110a-wm/perl5/lib"}

$0 =~ s|.*/||;
use diagnostics;
use strict; 
use warnings;

my $status = 0;
END {exit $status}
$SIG{__WARN__} = sub {print STDERR "$0: @@_"; $status = 1};
$SIG{__DIE__} = sub {warn @@_; exit};

use Data::Dumper;
use Getopt::Std;
use Parse::RecDescent;

$Data::Dumper::Indent = 0;
$Data::Dumper::Terse = 1;
#$::RD_WARN = 1;
#$::RD_HINT = 1;
#$::RD_TRACE = 1;

my %options;
getopts "g", \%options;
my $dump_grammar = $options{'g'};
my $linecount = 0;

sub floatd($) {
   my ($number) = @@_;
   $number =~ s/(^|\D)\./${1}0./;
   $number =~ s/\.($|\D)/.0$1/;
   $number =~ s/e/d/;
   $number .= "d0" unless $number =~ m/d/;
   return $number;
}

sub string($) {
   my ($string) = @@_;
   return "''" if $string eq '""';
   $string =~ s/""/"/g;
   $string =~ s/'/''/g;
   $string =~ s/"(.*)"/'$1'/;
   return $string;
}

my %opsub = (qw(
   !=     ~=
   %      rem:
   ^      raisedTo:
   acos   arcCos
   asin   arcSin
   atan   arcTan
   ceil   ceiling
   log    ln
   log10  log
   round  rounded
));

sub opsub(@@) {
   my ($op, @@args) = @@_;
   my $sub = $opsub{$op};
   return ($sub ? $sub : $op, @@args);
}

sub write_syntax_file($$) {
   my ($mb_fname, $syntax) = @@_;
   my $syntax_fname = $mb_fname;
   $syntax_fname =~ s|.*/||;
   $syntax_fname =~ s/\.[^.]*$//;
   $syntax_fname .= ".syntax";
   open my $syntax_file, ">$syntax_fname"
            or die "$0: $syntax_fname: $!\n";
   printf $syntax_file "%s\n", Data::Dumper->Dump ([$_]) for @@$syntax;
   close $syntax_file;
}

sub flatten($);
sub flatten($) {
   my ($stmt) = @@_;
   my $result = "";
   for my $item (@@$stmt) {
      if (ref $item) {
         $result .= " #(" . (flatten $item) . ")";
      }else {
         $item =~ s/^[^\d']/#$&/;
         $result .= " " . $item;
      }
   }
   return $result;
}

sub write_mbst_file($$) {
   my ($mb_fname, $syntax) = @@_;
   my $mbst_fname = $mb_fname;
   $mbst_fname =~ s|.*/||;
   $mbst_fname =~ s/\.[^.]*$//;
   $mbst_fname .= ".mbst";
   open my $mbst_file, ">$mbst_fname" or die "$0: $mbst_fname: $!\n";
   print "$0: opened >$mbst_fname\n";
   print $mbst_file "Object subclass: Program [\n",
                    "Program class >> get [\n",
                    "^ #(\n";
   for my $line (@@$syntax) {
      my ($linenr, $label, $stmt)
         = ($line->[0], $line->[1][0], $line->[2][0]);
      printf $mbst_file "#( %s %s #(%s))\n", $linenr,
             $label ? "#$label" : "nil", flatten $stmt
             if $label || $stmt;
   }
   print $mbst_file ").]]\n";
   close $mbst_file;
}

my @@grammar = <DATA>;
if ($dump_grammar) {
   printf STDERR "%3d: %s", $_, $grammar[$_] for 0..$#grammar;
}
my $grammar = join '', @@grammar;
my $parser = new Parse::RecDescent ($grammar);

push @@ARGV, "-" unless @@ARGV;
for my $mb_fname (@@ARGV) {
   open my $mb_file, "<$mb_fname" or warn "$mb_fname: $!" and next;
   print "$0: opened <$mb_fname\n";
   my @@source = <$mb_file>;
   my $source = join "", @@source;
   close $mb_file;
   my $syntax = $parser->program ($source)
              or die "$mb_fname: syntax error\n" and next;
   #write_syntax_file $mb_fname, $syntax;
   write_mbst_file $mb_fname, $syntax;
}


__DATA__

<autoaction: {[@@item]}>
<skip: qr{([ \t]+|#.*)*}>

program   : NL(?) line(s?) NL(s?) EOF  {$item[2]}

line      : label(?) stmt(?) NL        {[$::linecount,@@item[1,2]]}

label     : IDENT ':'                  {$item[1]}

stmt      : 'dim' IDENT '[' expr ']'   {[@@item[1,2,4]]}
          | 'let' lvalue '=' expr      {[@@item[1,2,4]]}
          | 'goto' IDENT               {[@@item[1,2]]}
          | 'if' relexpr 'goto' IDENT  {[@@item[1,2,4]]}
          | 'print' printable(s? /,/)  {[@@item[1,2]]}
          | 'input' lvalue(s? /,/)     {[@@item[1,2]]}

printable : /\"([^"\n]|\"\")*\"/       {::string($item[1])}
          | expr                       {$item[1]}

lvalue    : IDENT '[' expr ']'         {["aput",@@item[1,3]]}
          | IDENT                      {$item[1]}

relexpr   : expr relop expr            {[::opsub(@@item[2,1,3])]}

expr      : term expr2[$item[1]]                            {$item[2]}
expr2     : addop term expr2[[$item[1],$arg[0],$item[2]]]   {$item[3]}
          |                                                 {$arg[0]}

term      : factor term2[$item[1]]                          {$item[2]}
term2     : mulop factor term2[[$item[1],$arg[0],$item[2]]] {$item[3]}
          |                                                 {$arg[0]}

factor    : primary '^' factor         {[::opsub(@@item[2,1,3])]}
          | primary                    {$item[1]}

primary   : '(' expr ')'               {$item[2]}
          | '+' primary                {$item[2]}
          | '-' primary                {['negated',$item[2]]}
          | NUMBER                     {$item[1]}
          | IDENT '(' expr ')'         {[::opsub(@@item[1,3])]}
          | rvalue                     {$item[1]}

rvalue    : IDENT '[' expr ']'         {["aget",@@item[1,3]]}
          | IDENT                      {$item[1]}

relop     : ('='|'!='|'<='|'<'|'>='|'>')     {$item[1][1]}
addop     : ('+'|'-')                        {$item[1][1]}
mulop     : ('*'|'/')                        {$item[1][1]}

IDENT     : /[a-z_][a-z_0-9]*/i              {$item[1]}
NUMBER    : /(\d+\.?\d*|\.\d+)(e[+-]?\d+)?/i {::floatd($item[1])}
NL        : (/[\n;]/)                        {++$::linecount;'<NL>'}
EOF       : /^\Z/                            {'<EOF>'}

@


1.4
log
@-
@
text
@d2 1
a2 1
# $Id: mb2mbst.perl,v 1.3 2020-10-16 10:54:26-07 - - $
d102 1
d126 2
a127 2
   open my $mb_file, "<$mb_fname"
        or warn "$mb_fname: $!" and next;
a130 1
   print "$0: parsing $mb_fname\n";
@


1.3
log
@-
@
text
@d2 1
a2 1
# $Id: mb2mbst.perl,v 1.2 2020-09-06 21:02:55-07 - - $
d51 1
@


1.2
log
@-
@
text
@d2 1
a2 1
# $Id: mb2mbst.perl,v 1.1 2020-09-06 21:01:58-07 - - $
d54 1
a55 1
   round  rounded
d58 1
@


1.1
log
@-
@
text
@d2 1
a2 1
# $Id: sb2sbst.perl,v 1.8 2020-08-26 20:58:43-07 - - $
d67 2
a68 2
   my ($sb_fname, $syntax) = @@_;
   my $syntax_fname = $sb_fname;
d93 8
a100 8
sub write_sbst_file($$) {
   my ($sb_fname, $syntax) = @@_;
   my $sbst_fname = $sb_fname;
   $sbst_fname =~ s|.*/||;
   $sbst_fname =~ s/\.[^.]*$//;
   $sbst_fname .= ".sbst";
   open my $sbst_file, ">$sbst_fname" or die "$0: $sbst_fname: $!\n";
   print $sbst_file "Object subclass: Program [\n",
d106 1
a106 1
      printf $sbst_file "#( %s %s #(%s))\n", $linenr,
d110 2
a111 2
   print $sbst_file ").]]\n";
   close $sbst_file;
d122 4
a125 4
for my $sb_fname (@@ARGV) {
   open my $sb_file, "<$sb_fname"
        or warn "$sb_fname: $!" and next;
   my @@source = <$sb_file>;
d127 2
a128 2
   close $sb_file;
   print "$0: parsing $sb_fname\n";
d130 3
a132 3
              or die "$sb_fname: syntax error\n" and next;
   #write_syntax_file $sb_fname, $syntax;
   write_sbst_file $sb_fname, $syntax;
@
