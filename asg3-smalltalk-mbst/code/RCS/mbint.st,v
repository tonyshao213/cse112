head	1.16;
access;
symbols;
locks;
comment	@# @;


1.16
date	2021.02.12.03.21.43;	author -;	state -;
branches;
next	1.15;

1.15
date	2021.02.12.03.20.57;	author -;	state -;
branches;
next	1.14;

1.14
date	2021.02.11.02.22.05;	author -;	state -;
branches;
next	1.13;

1.13
date	2020.11.21.21.56.29;	author -;	state -;
branches;
next	1.12;

1.12
date	2020.11.13.03.35.55;	author -;	state -;
branches;
next	1.11;

1.11
date	2020.11.12.23.33.05;	author -;	state -;
branches;
next	1.10;

1.10
date	2020.11.10.07.34.52;	author -;	state -;
branches;
next	1.9;

1.9
date	2020.11.10.07.15.44;	author -;	state -;
branches;
next	1.8;

1.8
date	2020.10.29.03.08.04;	author -;	state -;
branches;
next	1.7;

1.7
date	2020.10.29.03.05.50;	author -;	state -;
branches;
next	1.6;

1.6
date	2020.10.22.23.39.54;	author -;	state -;
branches;
next	1.5;

1.5
date	2020.10.22.23.39.16;	author -;	state -;
branches;
next	1.4;

1.4
date	2020.09.07.08.15.59;	author -;	state -;
branches;
next	1.3;

1.3
date	2020.09.07.04.09.52;	author -;	state -;
branches;
next	1.2;

1.2
date	2020.09.07.04.08.45;	author -;	state -;
branches;
next	1.1;

1.1
date	2020.09.07.04.03.13;	author -;	state -;
branches;
next	;


desc
@@


1.16
log
@-
@
text
@#!/afs/cats.ucsc.edu/courses/cse112-wm/usr/smalltalk/bin/gst -f
"$Id: mbint.st,v 1.15 2021-02-11 19:20:57-08 - - $"

Object subclass: NumberStream [
   |atEndFlag stream buffer|
   NumberStream class >> new [
      ^ super new init: stdin.
   ]
   NumberStream class >> new: aStream [
      ^ super new init: aStream.
   ]
   init: aStream [
      atEndFlag := false.
      stream := aStream.
      buffer := OrderedCollection new.
   ]
   atEnd [ ^ atEndFlag ]
   nextNumber [
      [atEndFlag] whileFalse: [
         buffer size > 0 ifTrue: [
            ^ buffer removeFirst asNumber asFloatD.
         ].
         stdout flush.
         stderr flush.
         stream atEnd "This condition fills the input buffer."
            ifTrue: [atEndFlag := true]
            ifFalse: [buffer := stream nextLine substrings: ' ']
      ].
      ^ 0.0 / 0.0 "NaN".
   ]
].


Object subclass: Debug [
   level := 0. "multiple -d, -dd, -ddd options set debug level"
   Debug class >> incr [level := level + 1]
   Debug class >> > value [^ level > value]
].

Object subclass: MiniBasic [
   nl := Character nl.
   MiniBasic class >> unimplemented: object [
      |caller|
      caller := thisContext parentContext.
      stdout << object class << ' inherits '
             << caller method << ': ' << object << nl.
   ] 
   prefix [^ '(', self class printString, ' ']
   assertionFailed: message [
      stderr << 'Assertion Failed: ' << message << nl.
      stderr << self << nl.
      ObjectMemory quit: 1.
   ]
].

MiniBasic subclass: Expr [ "abstract base class"
   nan := 0.0 / 0.0.
   printOn: file [^ file << self prefix << ')']
   value [MiniBasic unimplemented: self. ^ nan]
].

Expr subclass: NumExpr [
   |value|
   NumExpr class >> new: val [^ super new init: val]
   init: val [value := val + 0.0d0]
   printOn: file [^ file << self prefix << value << ')']
   value [^ value + 0.0]
].

Expr subclass: VarExpr [
   |variable|
   varDict := Dictionary from: {
      #e   -> 1.0 exp.
      #eof -> 0.0.
      #nan -> (0.0 / 0.0).
      #pi  -> -1.0 arcCos.
   }.
   VarExpr class >> new: var [^ super new init: var]
   init: var [variable := var]
   printOn: file [^ file << self prefix << variable << ')']
   put: val [varDict at: variable put: val]
   value [^ varDict at: variable ifAbsent: [0.0]]
].

Expr subclass: UnopExpr [
   |oper opnd|
   UnopExpr class >> new: op with: opn [
      ^ super new init: op init: opn.
   ]
   init: op init: opn [
      oper := op. opnd := opn.
   ]
   printOn: file [
      ^ file << self prefix << oper << ' ' << opnd << ')'.
   ]
].

Expr subclass: BinopExpr [
   |oper opnd1 opnd2|
   BinopExpr class >> new: op with: opn1 with: opn2 [
      ^ super new init: op with: opn1 with: opn2.
   ]
   init: op with: opn1 with: opn2 [
      oper := op. opnd1 := opn1. opnd2 := opn2.
   ]
   printOn: file [
      ^ file << self prefix << oper << ' ' << opnd1
             << ' ' << opnd2 << ')'.
   ]
].

Expr subclass: ArrayExpr [
   |arrayName|
   arrayDict := Dictionary new.
   ArrayExpr class >> new: var [^ super new init: var]
   init: var [arrayName := var]
   printOn: file [^ file << self prefix << arrayName << ')']
].

Expr extend [
   Expr class >> parse: expr [
      expr isNumber ifTrue: [^ NumExpr new: expr].
      expr isSymbol ifTrue: [^ VarExpr new: expr].
      expr isArray ifTrue: [
         expr size = 2 ifTrue: [
            ^ UnopExpr new: (expr at: 1)
                       with: (Expr parse: (expr at: 2)).
         ].
         expr size = 3 ifTrue: [
            ((expr at: 1) = #aget) | ((expr at: 1) = #aput)
            ifTrue: [
               ^ BinopExpr new: (expr at: 1)
                           with: (ArrayExpr new: (expr at: 2))
                           with: (Expr parse: (expr at: 3)).
            ]
            ifFalse: [
               ^ BinopExpr new: (expr at: 1)
                           with: (Expr parse: (expr at: 2))
                           with: (Expr parse: (expr at: 3)).
            ]
         ].
         self assertionFailed: 'Expr>>parse: isArray wrong size'.
      ].
      self assertionFailed: 'Expr>>parse: expr wrong type'.
   ]
].

MiniBasic subclass: Stmt [ "abstract base class"
   stmtNr := 1.
   Stmt class >> getStmtNr [^ stmtNr]
   Stmt class >> incrStmtNr [stmtNr := stmtNr + 1]
   labelDict := Dictionary new.
   printOn: file [^ file << self prefix << ')']
   interp [MiniBasic unimplemented: self.]
].

Stmt subclass: DimStmt [
   |name size|
   DimStmt class >> new: stmt [^ super new init: stmt]
   init: stmt [
      name := ArrayExpr new: (stmt at: 2).
      size := Expr parse: (stmt at: 3).
   ]
   printOn: file [^ file << self prefix << name << ' ' << size << ')']
].

Stmt subclass: LetStmt [
   |name expr|
   LetStmt class >> new: stmt [^ super new init: stmt]
   init: stmt [
      name := Expr parse: (stmt at: 2).
      expr := Expr parse: (stmt at: 3).
   ]
   printOn: file [^ file << self prefix << name << ' ' << expr << ')']
].

Stmt subclass: GotoStmt [
   |label|
   GotoStmt class >> new: stmt [^ super new init: stmt]
   init: stmt [label := stmt at: 2]
   printOn: file [^ file << self prefix << label << ')']
].

Stmt subclass: IfStmt [
   |expr label|
   IfStmt class >> new: stmt [^ super new init: stmt]
   init: stmt [
      expr := Expr parse: (stmt at: 2).
      label := stmt at: 3.
   ]
   printOn: file [^ file << self prefix << expr << ' ' << label << ')']
].

Stmt subclass: InputStmt [
   |inputVars|
   stdinNumbers := NumberStream new.
   InputStmt class >> new: stmt [^ super new init: stmt]
   init: stmt [
      |args|
      args := stmt at: 2.
      inputVars := Array new: args size.
      1 to: args size do: [:index|
         inputVars at: index put: (Expr parse: (args at: index)).
      ]
   ]
   printOn: file [^ file << self prefix << inputVars << ')']
   interp [
      inputVars do: [:var|
         |value|
         value := stdinNumbers nextNumber.
         stdout << thisContext method << ' '
                << var << ': ' << value << nl.
      ].
   ]
].

Stmt subclass: PrintStmt [
   |printables|
   PrintStmt class >> new: stmt [^ super new init: stmt]
   init: stmt [
      |args|
      args := stmt at: 2.
      printables := Array new: args size.
      1 to: args size do: [:index|
         |arg|
         arg := args at: index.
         arg isString ifFalse: [ arg := Expr parse: arg].
         printables at: index put: arg.
      ]
   ]
   printOn: file [^ file << self prefix << printables << ')']
   interp [
      Debug > 2 ifTrue: [printables inspect].
      printables do: [:obj|
         obj isString ifTrue: [stdout << obj]
                      ifFalse: [stdout << ' ' << obj value].
      ].
      stdout << nl.
   ]
].

Stmt subclass: NullStmt [
   NullStmt class >> new: stmt [^ super new]
   printOn: file [^ file << self prefix << ')']
   interp []
].

Stmt extend [
   stmtDict := Dictionary from: {
      #dim   -> DimStmt.
      #let   -> LetStmt.
      #goto  -> GotoStmt.
      #if    -> IfStmt.
      #input -> InputStmt.
      #print -> PrintStmt.
      #null  -> NullStmt.
   }.
   Stmt class >> parse: stmt [
      |stmtSym stmtClass|
      stmt size = 0 ifTrue: [stmtSym := #null]
                    ifFalse: [stmtSym := stmt at: 1].
      stmtClass := stmtDict at: stmtSym.
      ^ stmtClass new: stmt.
   ]
]

MiniBasic subclass: Interpreter [
   |statements|
   Interpreter class >> new: program [^ super new init: program]
   init: program [
      statements := Array new: program size.
      1 to: program size do: [:index|
         |stmt parsed|
         stmt := (program at: index) at: 3.
         statements at: index put: (Stmt parse: stmt).
      ].
   ]

   print [
      stdout << 'Interpreter statements: [' << nl.
      1 to: statements size do: [:index|
         stdout << '   ' << index << ': '
                << (statements at: index) << nl.
      ].
      stdout << '].' << nl.
   ]

   interpret [
      |stmtNr|
      [stmtNr := Stmt getStmtNr. stmtNr <= statements size]
      whileTrue: [
         |stmtObj|
         Stmt incrStmtNr.
         stmtObj := statements at: stmtNr.
         Debug > 1 ifTrue: [stdout << stmtNr << ': ' << stmtObj << nl].
         stmtObj interp.
      ]
   ]
].

Object subclass: Main [
   nl := Character nl.
   scriptName := thisContext currentFileName.

   Main class >> usage [
      stderr << 'Usage: ' << scriptName << ' [-d] fileName' << nl.
      ObjectMemory quit: 1.
   ]

   Main class >> print: program [
      stdout << 'Main program: [' << nl.
      1 to: program size do: [:index|
         stdout << '   ' << index << ': ' << (program at: index) << nl.
      ].
      stdout << '].' << nl.
   ]

   Main class >> getopts [
      |fileName|
      Smalltalk arguments: '-d' do: [:opt :arg|
         opt = $d ifTrue: [Debug incr].
         opt = nil ifTrue: [
            fileName isNil ifFalse: [Main usage value].
            fileName := arg.
         ].
      ] ifError: [Main usage value].
      Debug > 0 ifTrue: [
         stdout << scriptName << ': ' << Smalltalk arguments << nl.
      ].
      ^ fileName.
   ]

   Main class >> main [
      |fileName|
      fileName := Main getopts.
      fileName isNil ifTrue: [Main usage value].
      [
         |program interpreter|
         FileStream fileIn: fileName.
         program := Program get.
         Debug > 0 ifTrue: [Main print: program].
         interpreter := Interpreter new: program.
         Debug > 0 ifTrue: [interpreter print].
         interpreter interpret.
      ] on: SystemExceptions.FileError do: [:signal|
         stderr << scriptName << ': ' << fileName << ': '
                << signal messageText << nl.
         ObjectMemory quit: 1.
      ].
   ]
].

Main main.

@


1.15
log
@-
@
text
@d2 1
a2 1
"$Id: mbint.st,v 1.14 2021-02-10 18:22:05-08 - - $"
d82 1
a82 1
   value [^ (varDict at: variable) + 0.0 ifAbsent: [0.0]]
@


1.14
log
@-
@
text
@d2 1
a2 1
"$Id: mbint.st,v 1.13 2020-11-21 13:56:29-08 - - $"
d82 1
a82 1
   value [^ varDict at: variable ifAbsent: [0.0]]
@


1.13
log
@-
@
text
@d2 1
a2 1
"$Id: mbint2.st,v 1.1 2020-11-16 15:25:44-08 - - $"
d67 1
a67 1
   value [^ value]
@


1.12
log
@-
@
text
@d2 1
a2 1
"$Id: mbint.st,v 1.11 2020-11-12 15:33:05-08 - - $"
d130 11
a140 3
            ^ BinopExpr new: (expr at: 1)
                        with: (Expr parse: (expr at: 2))
                        with: (Expr parse: (expr at: 3)).
d161 1
a161 1
      name := Expr parse: (stmt at: 2).
@


1.11
log
@-
@
text
@d2 1
a2 1
"$Id: mbint.st,v 1.10 2020-11-09 23:34:52-08 - - $"
d153 1
a153 1
      name := stmt at: 2.
d225 1
@


1.10
log
@-
@
text
@d2 1
a2 1
"$Id: mbint.st,v 1.9 2020-11-09 23:15:44-08 - - $"
d163 1
a163 1
      name := stmt at: 2.
@


1.9
log
@-
@
text
@d2 1
a2 1
"$Id: mbint.st,v 1.8 2020-10-28 20:08:04-07 - - $"
d203 2
a204 1
         stdout << var << ': ' << value << nl.
@


1.8
log
@-
@
text
@d2 31
a32 1
"$Id: mbint.st,v 1.7 2020-10-28 20:05:50-07 - - $"
d188 1
d199 7
@


1.7
log
@-
@
text
@d2 1
a2 1
"$Id: mbint.st,v 1.6 2020-10-22 16:39:54-07 - - $"
d19 2
a20 2
   assertFail: message [
      stderr << 'assertion failed: ' << message << nl.
d104 1
a104 1
         self assertFail: 'Expr>>parse: isArray wrong size'.
d106 1
a106 1
      self assertFail: 'Expr>>parse: expr wrong type'.
@


1.6
log
@-
@
text
@d2 1
a2 1
"$Id: mbint.st,v 1.5 2020-10-22 16:39:16-07 - - $"
d19 5
d104 1
a104 1
         MiniBasic unimplemented: expr. ^ nil. "assert can not happen"
d106 1
a106 1
      MiniBasic unimplemented: expr. ^ nil. "assert can not happen"
@


1.5
log
@-
@
text
@d2 1
a2 1
"$Id: mbint.st,v 1.4 2020-09-07 01:15:59-07 - - $"
d15 1
a15 1
      stdout << object class << ' uses '
@


1.4
log
@-
@
text
@d2 1
a2 1
"$Id: mbint.st,v 1.3 2020-09-06 21:09:52-07 - - $"
d15 1
a15 1
      stdout << 'Error: ' << object class << ' inherits '
@


1.3
log
@-
@
text
@d2 1
a2 1
"$Id: mbint.st,v 1.2 2020-09-06 21:08:45-07 - - $"
d10 1
a10 1
Object subclass: SmallBasic [
d12 1
a12 1
   SmallBasic class >> unimplemented: object [
d21 1
a21 1
SmallBasic subclass: Expr [ "abstract base class"
d24 1
a24 1
   value [SmallBasic unimplemented: self. ^ nan]
d99 1
a99 1
         SmallBasic unimplemented: expr. ^ nil. "assert can not happen"
d101 1
a101 1
      SmallBasic unimplemented: expr. ^ nil. "assert can not happen"
d105 1
a105 1
SmallBasic subclass: Stmt [ "abstract base class"
d111 1
a111 1
   interp [SmallBasic unimplemented: self.]
d214 1
a214 1
SmallBasic subclass: Interpreter [
@


1.2
log
@-
@
text
@d2 1
a2 1
"$Id: mbint.st,v 1.1 2020-09-06 21:03:13-07 - - $"
d80 1
a80 1
   VarExpr class >> new: var [^ super new init: var]
@


1.1
log
@-
@
text
@d2 1
a2 1
"$Id: sbint.st,v 1.41 2020-09-04 22:08:03-07 - - $"
d78 1
a78 1
   |arrayname|
d80 3
a82 3
   VarExpr class >> new: var [^ super new init: name]
   init: var [arrayname := name]
   printOn: file [^ file << self prefix << arrayname << ')']
@
