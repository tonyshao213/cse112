head	1.2;
access;
symbols;
locks;
comment	@# @;


1.2
date	2020.09.07.05.47.47;	author -;	state -;
branches;
next	1.1;

1.1
date	2020.09.07.05.23.26;	author -;	state -;
branches;
next	;


desc
@@


1.2
log
@-
@
text
@$Id: SCORE,v 1.1 2020-09-06 22:23:26-07 - - $

Grader:  copy this file into the student's directory and grade
according to the following point values.  There are a max of 30
points for the program and 30 points for the test run.  

The numbers in parens are the max points for a particular section.
Enter some number between 0 and the max depending on the quality
of the work.

________________________________________________________________________

PROGRAM SOURCE CODE. (30)

        (2) Run checksource.  Deduct 1 point per different
            file complained about, but not more than 2 points.
            checksource README *.scm >check.log
            Score 0 for this item if all files are not *.scm.

        (2) Look at the code.  Formatted reasonably?  Properly
            indented?  Good choice of identifiers?

        (3) Code to manage the label table.
            Preliminary scan to create it.

        (2) Code to implement the PRINT statement

        (3) Code to implement the INPUT statement

        (2) Code to implement the DIM statement

        (3) Code to implement the LET statement

        (3) Code to implement the IF statement

        (2) Code to implement the GOTO statement

        (3) code to evaluate operator expressions

        (3) code to evaluate function calls and arrays from
            the symbol table

        (2) main statement evaluation loop uses tail recursion
            in all cases

total source code score:  /30
Minimum score is 1 if the directory exists.

________________________________________________________________________

TEST RUN.  (30)

        Record a score of zero to two points for each of the
        following test programs, except use a max of 3 ponts
        for those output labelled (max 3).  Indicate any point loss.
        Add up the best scores for a total max of 30.
        Do not record more than 30 points.

         00-hello-world.mbir
         01-1to10.mbir
         02-exprs.mbir
         10-exprs.mbir
         11-let.mbir
         12-syntax.mbir
         20-goto.mbir
         21-let-if.mbir
         22-fibonacci.mbir
         23-pi-e-fns.mbir
         30-quadratic.mbir
         31-collatz.mbir
         32-factorial.mbir
         40-sort-array.mbir (max 3)
         41-eratosthenes.mbir (max 3)

total test run score: /30

________________________________________________________________________

Add up the two numbers out of 30 and enter the score below at
the end of the line that says TOTALSCORE=.  TOTAL SCORE ENTERED
BELOW BETWEEN 1 and 60.  A score of 0 is used to indicate
nothing was submitted.  If they submitted anything at all,
it is worth at least 1 point.

If doing pair programming look for the TOTALPAIR= score in
SCORE.pair.  Deduct points specified in TOTALPAIR.

Set TOTALSCORE = source code score + test run score + TOTALPAIR.
Note:  TOTALPAIR is from -10 to 0, but the other two are positive.

TOTALSCORE=

If the student is doing pair programming verify that the partner's
directory exists.  If not mkdir.  Then cp SCORE into it.  Also
make sure the symlink PARTNER points in both directions.

@


1.1
log
@-
@
text
@d1 1
a1 1
$Id: SCORE,v 1.2 2020-09-06 20:15:55-07 - - $
d56 2
a57 2
        Add up the best scores for a total max of 30, and
        ignore the lowest score.
@
