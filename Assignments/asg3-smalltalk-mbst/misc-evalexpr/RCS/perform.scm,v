head	1.3;
access;
symbols;
locks;
comment	@# @;


1.3
date	2021.02.18.05.17.45;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.02.18.05.07.54;	author -;	state -;
branches;
next	1.1;

1.1
date	2021.02.18.05.07.09;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@#!/afs/cats.ucsc.edu/courses/cse112-wm/usr/racket/bin/mzscheme -qr
;; $Id: perform.scm,v 1.2 2021-02-17 21:07:54-08 - - $

(define binops '(+ - * / expt))

(define data '((2 3) (4 5)))

(for-each 
   (lambda (args)
      (let ((flargs (map (lambda (arg) (+ 0.0 arg)) args)))
           (for-each
              (lambda (op)
                 (let ((result (apply (eval op) flargs)))
                      (printf "~a = ~a~n"
                              (cons op flargs) result)))
           binops)))
   data)

@


1.2
log
@-
@
text
@d2 1
a2 1
;; $Id: perform.scm,v 1.1 2021-02-17 21:07:09-08 - - $
d10 1
a10 2
      (let ((left (+ 0.0 (car args)))
            (right (+ 0.0 (cadr args))))
d13 3
a15 2
                 (let ((result ((eval op) left right)))
                      (printf "~a ~a ~a = ~a~n" left op right result)))
@


1.1
log
@-
@
text
@d2 1
a2 1
;; $Id$
d14 1
a14 1
                 (let ((result (eval op) left right))
@
