head	1.38;
access;
symbols;
locks;
comment	@# @;


1.38
date	2020.11.27.02.37.11;	author -;	state -;
branches;
next	1.37;

1.37
date	2020.11.27.02.36.32;	author -;	state -;
branches;
next	1.36;

1.36
date	2020.11.27.02.35.12;	author -;	state -;
branches;
next	1.35;

1.35
date	2020.11.27.02.34.53;	author -;	state -;
branches;
next	1.34;

1.34
date	2020.11.27.02.33.55;	author -;	state -;
branches;
next	1.33;

1.33
date	2020.11.27.02.33.19;	author -;	state -;
branches;
next	1.32;

1.32
date	2020.11.27.02.31.35;	author -;	state -;
branches;
next	1.31;

1.31
date	2020.11.27.02.28.05;	author -;	state -;
branches;
next	1.30;

1.30
date	2020.11.27.00.30.32;	author -;	state -;
branches;
next	1.29;

1.29
date	2020.11.27.00.29.17;	author -;	state -;
branches;
next	1.28;

1.28
date	2020.11.24.06.58.56;	author -;	state -;
branches;
next	1.27;

1.27
date	2020.11.24.06.50.24;	author -;	state -;
branches;
next	1.26;

1.26
date	2020.11.24.06.49.41;	author -;	state -;
branches;
next	1.25;

1.25
date	2020.11.24.06.49.09;	author -;	state -;
branches;
next	1.24;

1.24
date	2020.11.24.06.48.05;	author -;	state -;
branches;
next	1.23;

1.23
date	2020.11.24.06.47.11;	author -;	state -;
branches;
next	1.22;

1.22
date	2020.11.24.06.46.43;	author -;	state -;
branches;
next	1.21;

1.21
date	2020.11.24.06.45.57;	author -;	state -;
branches;
next	1.20;

1.20
date	2020.11.24.06.30.28;	author -;	state -;
branches;
next	1.19;

1.19
date	2020.11.24.06.29.59;	author -;	state -;
branches;
next	1.18;

1.18
date	2020.11.23.04.11.47;	author -;	state -;
branches;
next	1.17;

1.17
date	2020.11.23.04.10.47;	author -;	state -;
branches;
next	1.16;

1.16
date	2020.11.23.04.10.18;	author -;	state -;
branches;
next	1.15;

1.15
date	2020.11.23.03.52.45;	author -;	state -;
branches;
next	1.14;

1.14
date	2020.11.23.03.52.25;	author -;	state -;
branches;
next	1.13;

1.13
date	2020.11.23.03.51.36;	author -;	state -;
branches;
next	1.12;

1.12
date	2020.11.23.03.50.51;	author -;	state -;
branches;
next	1.11;

1.11
date	2020.11.23.03.50.11;	author -;	state -;
branches;
next	1.10;

1.10
date	2020.11.23.02.21.40;	author -;	state -;
branches;
next	1.9;

1.9
date	2020.11.23.02.21.05;	author -;	state -;
branches;
next	1.8;

1.8
date	2020.11.23.02.18.43;	author -;	state -;
branches;
next	1.7;

1.7
date	2020.11.23.02.18.22;	author -;	state -;
branches;
next	1.6;

1.6
date	2020.11.23.02.13.40;	author -;	state -;
branches;
next	1.5;

1.5
date	2020.11.23.02.08.51;	author -;	state -;
branches;
next	1.4;

1.4
date	2020.11.23.02.07.15;	author -;	state -;
branches;
next	1.3;

1.3
date	2020.11.23.02.06.43;	author -;	state -;
branches;
next	1.2;

1.2
date	2020.11.23.02.05.23;	author -;	state -;
branches;
next	1.1;

1.1
date	2020.11.23.02.04.14;	author -;	state -;
branches;
next	;


desc
@@


1.38
log
@-
@
text
@#!/usr/bin/perl
# $Id: run.perl,v 1.37 2020-11-26 18:36:32-08 - - $
#
# Copy code from this file in order to print an exit status.
#

$0 =~ s|.*/||;
use strict;
use warnings;

my $EXIT_STATUS = 0;
END { exit $EXIT_STATUS; }
sub note (@@) { print STDERR @@_; };
$SIG{'__WARN__'} = sub { note @@_; $EXIT_STATUS = 1; };
$SIG{'__DIE__'} = sub { warn @@_; exit; };

# sigtoperl: x86_64 Linux unix1.lt.ucsc.edu
# sigtoperl: Sun Nov 22 17:33:55 2020
my %strsignal = (
    0 => "Unknown signal 0",
    1 => "Hangup",
    2 => "Interrupt",
    3 => "Quit",
    4 => "Illegal instruction",
    5 => "Trace/breakpoint trap",
    6 => "Aborted",
    7 => "Bus error",
    8 => "Floating point exception",
    9 => "Killed",
   10 => "User defined signal 1",
   11 => "Segmentation fault",
   12 => "User defined signal 2",
   13 => "Broken pipe",
   14 => "Alarm clock",
   15 => "Terminated",
   16 => "Stack fault",
   17 => "Child exited",
   18 => "Continued",
   19 => "Stopped (signal)",
   20 => "Stopped",
   21 => "Stopped (tty input)",
   22 => "Stopped (tty output)",
   23 => "Urgent I/O condition",
   24 => "CPU time limit exceeded",
   25 => "File size limit exceeded",
   26 => "Virtual timer expired",
   27 => "Profiling timer expired",
   28 => "Window changed",
   29 => "I/O possible",
   30 => "Power failure",
   31 => "Bad system call",
);

sub run_command (@@) {
   my (@@command) = @@_;
   print "@@command\n";
   my $status = eval {no warnings; system @@command};
   return undef unless $status;
   return 127, "$!" if $status == -1;
   my $signal = $status & 0x7F;
   my $core = $status & 0x80;
   my $exit = ($status >> 8) & 0xFF;
   return $exit, "Error $exit" unless $signal || $core;
   return $signal + 128,
         ($strsignal{$signal} || "Invalid Signal Number $signal")
         . ($core ? " (core dumped)" : "");
}

#
# What you need is the hash and the function.
# The following is just a dummy main function for testing.
#

push @@ARGV, "false" unless @@ARGV;
my ($bashcode, $message) = run_command @@ARGV;
printf "$0: $ARGV[0]: $message\n" if $message;
printf "bash status $bashcode\n";
exit 2 if $bashcode;

# 
# Wait returns 16 bit number to parent process.
# 
# +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
# |          exit status          | c |          signal           |
# +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
#  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0
# 
# Bits 15..8 (8-bit field) is the exit status returned by the
# low order 8 bits of the argument to the exit system call or
# returned by the main function.
# 
# Bit 7 is set to 1 if a core file was dumped.
# 
# Bits 6..0 (7-bit field) is the encoded signal number which
# caused the program to crash.
# 
@


1.37
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.36 2020-11-26 18:35:12-08 - - $
d77 2
a78 1
printf "bash status $bashcode\n" and exit 2 if $bashcode;
@


1.36
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.35 2020-11-26 18:34:53-08 - - $
d76 2
a77 2
printf "$0: $ARGV[0]: $message ($bashcode)\n" if $message;
exit 2 if $bashcode;
@


1.35
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.34 2020-11-26 18:33:55-08 - - $
d77 1
a77 1
return 2 if $bashcode;
@


1.34
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.33 2020-11-26 18:33:19-08 - - $
d75 3
a77 2
my ($bash, $message) = run_command @@ARGV;
printf "$0: $ARGV[0]: $message ($bash)\n" if $message;
@


1.33
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.32 2020-11-26 18:31:35-08 - - $
a74 1
printf "$0: @@ARGV\n";
@


1.32
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.31 2020-11-26 18:28:05-08 - - $
d75 1
a76 1
printf "$0: @@ARGV\n";
@


1.31
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.30 2020-11-26 16:30:32-08 - - $
d76 1
@


1.30
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.29 2020-11-26 16:29:17-08 - - $
d59 1
a59 1
   return "$!" if $status == -1;
d63 4
a66 3
   return "Error $exit" unless $signal || $core;
   return ($strsignal{$signal} || "Invalid Signal Number $signal")
        . ($core ? " (core dumped)" : "");
d75 2
a76 2
my $message = run_command @@ARGV;
printf "$0: $ARGV[0]: $message\n" if $message;
@


1.29
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.28 2020-11-23 22:58:56-08 - - $
d64 1
a64 1
   return (strsignal{$signal} || "Invalid Signal Number $signal")
@


1.28
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.27 2020-11-23 22:50:24-08 - - $
d56 10
a65 12
   my $wait = system @@command;
   my $message = "$0: $command[0]: ";
   if ($wait == -1) {
      $message .= $!;
   }elsif ($wait & 0xFF) {
      $message .= $strsignal{$wait & 0x7F} || "Invalid Signal Number";
      $message .= " (core dumped)" if $wait & 0x80;
   }elsif ($wait >> 8) {
      $message .= "Error " . ($wait >> 8);
   }
   note "$message\n" if $wait;
   return $wait;
d74 2
a75 2
my $wait = run_command @@ARGV;
printf "Command wait status: 0x%04X\n", $wait;
@


1.27
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.26 2020-11-23 22:49:41-08 - - $
d77 1
a77 1
printf "$0: 0x%04X\n", $wait;
@


1.26
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.25 2020-11-23 22:49:09-08 - - $
d77 1
a77 1
print "$0: $wait\n";
@


1.25
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.24 2020-11-23 22:48:05-08 - - $
d66 1
a66 1
   note $message if $wait;
@


1.24
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.23 2020-11-23 22:47:11-08 - - $
d60 1
a60 1
   elsif ($wait & 0xFF) {
d66 1
a66 1
   note $mesage if $wait;
@


1.23
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.22 2020-11-23 22:46:43-08 - - $
d60 3
a62 3
   elsif ($wait & 0x7F) {
      $message .= $strsignal{$status & 0x7F} || "Invalid Signal Number";
      $message .= " (core dumped)" if $status & 0x80;
@


1.22
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.21 2020-11-23 22:45:57-08 - - $
d77 1
@


1.21
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.20 2020-11-23 22:30:28-08 - - $
d76 1
a76 5
my $wait = system "@@ARGV";
my $status = ($wait >> 8);
my $core = ($wait & 0x80) != 0;
my $signal = $wait & 0x7F;
note sprintf "$0: %s: %s\n", $ARGV[0], status_string $wait;
@


1.20
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.19 2020-11-23 22:29:59-08 - - $
d54 14
a67 11
#
# See man -s 2 wait for an explanation.
#
sub status_string ($) {
   my ($status) = @@_;
   return "$!" if $status == -1;
   return "OK" unless $status;
   return sprintf "Error %d", $status >> 8 if ($status & 0xFF) == 0;
   my $message = $strsignal{$status & 0x7F} || "Invalid Signal Number";
   $message .= " (core dumped)" if $status & 0x80;
   return $message;
@


1.19
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.18 2020-11-22 20:11:47-08 - - $
d77 1
a77 1
note "$0: %s: %s\n", $ARGV[0], status_string $wait;
@


1.18
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.17 2020-11-22 20:10:47-08 - - $
d59 1
d73 1
a73 1
my $wait = system ("@@ARGV") & 0xFFFF;
d77 1
a77 2
printf "$0: %s: 0x%04X = (%d,%d,%d): %s\n", $ARGV[0],
       $wait, $status, $core, $signal, status_string $wait;
@


1.17
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.16 2020-11-22 20:10:18-08 - - $
d74 1
a74 1
my $core = ($wait & 0x80) == 0;
@


1.16
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.14 2020-11-22 19:52:25-08 - - $
d72 1
a72 1
my $wait = system "@@ARGV" & 0xFFFF;
@


1.15
log
@-
@
text
@d72 4
a75 4
system "@@ARGV";
my $status = ($? >> 8) & 0xFF;
my $core = ($? & 0x80) != 0;
my $signal = $? & 0x7F;
d77 1
a77 1
       $?, $status, $core, $signal, status_string $?;
@


1.14
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.13 2020-11-22 19:51:36-08 - - $
d74 1
a74 1
my $core = ($? & 0x80) == 0;
@


1.13
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.12 2020-11-22 19:50:51-08 - - $
d74 1
a74 1
my $core = ($? & 0x80) != 0;
@


1.12
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.11 2020-11-22 19:50:11-08 - - $
d83 1
a83 1
# |       exit status             | c |         signal            |
@


1.11
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.10 2020-11-22 18:21:40-08 - - $
d80 2
a85 2
# 
# Wait returns 16 bit number to parent process.
@


1.10
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.9 2020-11-22 18:21:05-08 - - $
d79 17
@


1.9
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.8 2020-11-22 18:18:43-08 - - $
d76 2
a77 2
printf "$0: 0x%04X = (%d,%d,%d): %s\n", $?, $status, $core, $signal,
       status_string $?;
@


1.8
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.7 2020-11-22 18:18:22-08 - - $
d73 5
a77 1
printf "$0: 0x%04X: %s\n", $?, status_string $?;
@


1.7
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.6 2020-11-22 18:13:40-08 - - $
d73 1
a73 1
printf "$0: 0x%04X: %s\n", $?, status_string $? if $?;
@


1.6
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.5 2020-11-22 18:08:51-08 - - $
d59 1
a59 1
   return undef unless $status;
d73 1
a73 1
printf "$0: %s: %s\n", $ARGV[0], status_string $? if $?;
@


1.5
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.4 2020-11-22 18:07:15-08 - - $
d73 1
a73 1
printf "$0: $ARGV[0]: %s\n", $?, status_string $? if $?;
@


1.4
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.3 2020-11-22 18:06:43-08 - - $
d71 1
d73 1
a73 1
printf "$0: $ARGV[1]: %s\n", $?, status_string $? if $?;
@


1.3
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.2 2020-11-22 18:05:23-08 - - $
d72 1
a72 1
printf "0x%04X %s\n", $?, status_string $? if $?;
@


1.2
log
@-
@
text
@d2 1
a2 1
# $Id: run.perl,v 1.1 2020-11-22 18:04:14-08 - - $
d6 2
d10 6
@


1.1
log
@-
@
text
@d2 1
a2 1
# $Id: prtstatus.perl,v 1.1 2020-11-22 18:02:15-08 - - $
a51 2
   printf "0x%08X\n", $status;
   print $status & 0xFF, "\n";
@
