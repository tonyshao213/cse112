head	1.3;
access;
symbols;
locks;
comment	@# @;


1.3
date	2021.05.29.17.16.33;	author -;	state -;
branches;
next	1.2;

1.2
date	2020.12.02.04.36.30;	author -;	state -;
branches;
next	1.1;

1.1
date	2018.11.07.02.50.43;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@#!/usr/bin/perl
# $Id: graph.perl,v 1.2 2020-12-01 20:36:30-08 - - $

use strict;
use warnings;
$0 =~ s|.*/||;

# Example setting up a directed graph.

my @@inputs = (
   "all : hello",
   "hello : main.o hello.o",
   "main.o : main.c hello.h",
   "foo : ",
   "hello.o : hello.c hello.h",
   "ci : Makefile main.c hello.c hello.h",
   "bar : ",
   "test : hello",
   "clean : ",
   "spotless : clean",
);

sub parse_dep ($) {
   my ($line) = @@_;
   return undef unless $line =~ m/^(\S+)\s*:\s*(.*?)\s*$/;
   my ($target, $dependency) = ($1, $2);
   my @@dependencies = split ' ', $dependency;
   return $target, \@@dependencies;
}

my %graph;
for my $input (@@inputs) {
   my ($target, $deps) = parse_dep $input;
   print "$0: syntax error: $input\n" and next unless defined $target;
   $graph{$target} = $deps;
}

for my $target (keys %graph) {
   print "\"$target\"";
   my $deps = $graph{$target};
   if (not @@$deps) {
      print " has no dependencies";
   }else {
      print " depends on";
      print " \"$_\"" for @@$deps;
   }
   print "\n";
}

@


1.2
log
@-
@
text
@d2 1
a2 1
# $Id: graph.perl,v 1.1 2018-11-06 18:50:43-08 - - $
d27 1
a27 1
   my @@dependencies = split m/\s+/, $dependency;
@


1.1
log
@-
@
text
@d2 1
a2 1
# $Id: graph.perl,v 1.5 2018-11-06 17:42:06-08 - - $
d14 1
d17 1
@
