#!/usr/bin/perl
# $Id: pmake,v 1.39 2021-05-21 18:35:44-07 - - $

# Partner: Tony Shao (toshao@ucsc.edu)
# Partner: Brendan Teo (bteo1@ucsc.edu)

use strict;
use warnings;
use diagnostics;

my %strsignal = (
    1 => "Hangup",
    2 => "Interrupt",
    3 => "Quit",
    4 => "Illegal instruction",
    5 => "Trace/breakpoint trap",
    6 => "Aborted",
    7 => "Bus error",
    8 => "Floating point exception",
    9 => "Killed",
   11 => "Segmentation fault",
   13 => "Broken pipe",
   14 => "Alarm clock",
   15 => "Terminated",
   16 => "Stack fault",
   17 => "Child exited",
   18 => "Continued",
   19 => "Stopped (signal)",
   20 => "Stopped",
   21 => "Stopped (tty input)",
   22 => "Stopped (tty output)",
   24 => "CPU time limit exceeded",
   25 => "File size limit exceeded",
   26 => "Virtual timer expired",
   27 => "Profiling timer expired",
   28 => "Window changed",
   29 => "I/O possible",
   30 => "Power failure",
   31 => "Bad system call",
);

# getopts.perl stuff
$0 =~ s|^(.*/)?([^/]+)/*$|$2|;
my $EXITCODE = 0;
END{ exit $EXITCODE; }
sub note(@) { print STDERR "$0: @_"; };
$SIG{'__WARN__'} = sub { note @_; $EXITCODE = 1; };
$SIG{'__DIE__'} = sub { warn @_; exit; };

(my $USAGE = <<__END_USAGE__) =~ s/^#[ ]?//gm;
#
# NAME
#    $0 - getopts example
#
# SYNOPSIS
#    $0 [-abcopq] [file...]
#
# DESCRIPTION
#    Illustrates the use of getopts.
#
# OPTIONS
#    -h    print help and exit
#    -abc  flags not requiring options
#    -opq  flags requiring arguments
#
__END_USAGE__

use Getopt::Std;
my %OPTS;
getopts ("abcho:p:q:", \%OPTS);
print $USAGE and exit if $OPTS{'h'};
# end getopts.perl stuff

my %macro_table;
my %target_table;
my %command_table;
my @macros;
my @targets;
my $last_target;
my $f_target;
my $f_dep;
my $first;

#read inputs
open(my $fh, '<', "Makefile") or die "Can't open < Makefile: $!";
$first = $ARGV[0];
while (my $line = <$fh>) {
    chomp($line);
    my $ishash = substr($line, 0, 1);
    if (($ishash ne "#")) {
        if ($line =~ /\t(.*)$/) {
            my $array = $command_table{$last_target};
            push @$array, $1;
            $command_table{$last_target} = $array;
        } elsif ($line =~ /=/) {
            push @macros, $line;
        } elsif ($line =~ m/^(\S+)\s*:\s*(.*?)\s*$/) {
            if (not $first)
            {
                $first = $1;
            }
            # implement time stamps and % handling
            push @targets, $line;
            $last_target = $1;
        }
    }
}
close $fh;

# split macros
sub parse_macros {
    my ($line) = @_;
    return undef unless $line =~ m/^(\S+)\s*=\s*(.*?)\s*$/;
    my ($macro, $value) = ($1, $2);
    my @values = split m/\s+/, $value;
    return $macro, \@values;
}

for my $m (@macros) {
    my ($var, $val) = parse_macros $m;
    print "$0: syntax error: $m\n" and next unless defined $var;
    $macro_table{$var} = $val;
}

# split dependencies
sub parse_dep {
    my ($line) = @_;
    return undef unless $line =~ m/^(\S+)\s*:\s*(.*?)\s*$/;
    my ($target, $dependency) = ($1, $2);
    my @dependencies = split m/\s+/, $dependency;
    my @temp_target;
    push(@temp_target, unpacker($target));
    if($target ne $temp_target[0])
    {
        $command_table{$temp_target[0]} = $command_table{$target};
    }
    $target = $temp_target[0];
    my @deps;
    if (not @dependencies)
    {
        push(@deps, "undef");
    }
    for my $d (@dependencies) {
        push(@deps, unpacker($d));
    }
    if (not $f_target && $target) {
        $f_target = $target;
    }
    if (not $f_dep && $deps[0]) {
        $f_dep = $deps[0];
    }
    return $target, \@deps;
}

for my $t (@targets) {
    my ($target, $deps) = parse_dep $t;
    print "$0: syntax error: $t\n" and next unless defined $target;
    $target_table{$target} = $deps;
}

# replace macros, recursively if needed
sub unpacker {
    my ($macro) = @_;
    my @results;
    if(substr ($macro, 0, 1) ne "\$") {
        return $macro;
    }
    elsif (substr ($macro, 1, 1) eq "\$") {
        return \$;
    }
    elsif (substr ($macro, 1, 1) eq "<") {
       return $f_dep;
    }
    elsif (substr ($macro, 1, 1) eq "@") {
       return $f_target;
    }
    else
    {
        my $temp = substr($macro, 2, (length($macro)-3));
        my $value = $macro_table{$temp};
        foreach my $v (@$value) {
            push(@results, unpacker ($v));
        }
    }
    return @results;
}

sub mtime ($) {
    my ($filename) = @_;
    my @stat = stat $filename;
    return @stat ? $stat[9] : undef;
}

# split commands and replace macros
sub parse_commands {
    my ($line) = @_;
    my @words = split m/\s+/, $line;
    my @new_cmd;
    for (@words)
    {
        push @new_cmd, unpacker($_);
    }
    return join(" ", @new_cmd);
}

# execute commands
sub run_cmds {
    my $tar = $_[0];
    my $values = $command_table{$tar};
    my $depends = $target_table{$tar};
    foreach (@$depends) {
        if(exists $target_table{$_})
        {
            run_cmds($_);
        }
    }
    for (@$values) {
        if($_ eq "undef")
        {
            next;
        }
        my $cmd = parse_commands $_;
        my $silent_command = 0;
        my $forced_command = 0;
        # check to make sure that @ is not first char
        if (substr($cmd, 0, 1) eq "@") {
            $silent_command = 1;
            $cmd = substr($cmd, 2);
        }
        # also check to make sure - is not first char
        if (substr($cmd, 0, 1) eq "-") {
            $forced_command = 1;
            $cmd = substr($cmd, 2);
        }
        if ($silent_command == 0){
            print "$cmd\n";
        }
        system $cmd;
        
        my $term_signal = $? & 0x7F;
        my $core_dumped = $? & 0x80;
        my $exit_status = ($? >> 8) & 0xFF;
        if($forced_command == 0 and $exit_status != 0)
        {
            die "make: [Makefile: $tar] Error $exit_status";
        }
        elsif($exit_status != 0)
        {
            print STDERR "make: [Makefile: $tar] ";
            print STDERR "Error $exit_status (ignored)\n";
        }
    }
}

run_cmds ($first);
exit(0);